# User types
type User {
  id: ID!
  email: String!
  displayName: String!
  avatar: String
  createdAt: String
  isGoogleUserUserWithoutPassword: Boolean!
}

# Place types
type Place {
  id: ID! 
  type: String!
  geometry: Geometry!
  properties: PlaceProperties!
}

type Geometry {
  type: String!
  coordinates: [Float!]!
}

type CharacteristicData {
  pressed: Boolean!
  count: Int!     
}

type CharacteristicCounts {
  deliciousFilterCoffee: CharacteristicData!
  pleasantAtmosphere: CharacteristicData!
  friendlyStaff: CharacteristicData!
  yummyEats: CharacteristicData!   
  affordablePrices: CharacteristicData!
  freeWifi: CharacteristicData!
  petFriendly: CharacteristicData!  
  outdoorSeating: CharacteristicData!
}

type PlaceProperties {
  id: ID!
  name: String!
  description: String!
  address: String!
  image: String!
  instagram: String!
  averageRating: Float
  ratingCount: Int!
  favoriteCount: Int!
  isFavorite: Boolean!
  reviews: [Review!]!
  characteristicCounts: CharacteristicCounts!
}

type PlaceReviews {
  id: ID!
  reviews: [Review!]!
}


type Review {
  id: ID!
  text: String
  userId: ID!
  userName: String!
  userAvatar: String
  placeId: ID!
  createdAt: String!
  isOwnReview: Boolean!
  userRating: Float
}


type UserReviewActivity {
  rating: Int
  reviewText: String
  placeId: ID!
  placeName: String!
  averageRating: Float
  createdAt: String!
}

# Auth types
type AuthPayload {
  user: User!
  isFirstLogin: Boolean
}

type LogoutResponse {
  message: String!
}

# Response types for mutations
type SuccessResponse {
  success: Boolean!
}

# Queries
type Query {
  currentUser: User
  places: [Place!]!
  placeReviews(placeId: ID!): PlaceReviews!
  getUserReviewActivity: [UserReviewActivity!]!
}

enum Characteristic {
  deliciousFilterCoffee
  pleasantAtmosphere
  friendlyStaff
  yummyEats    
  affordablePrices
  freeWifi
  petFriendly  
  outdoorSeating
}

# Mutations
type Mutation {
  loginWithGoogle(code: String!): AuthPayload
  signInWithEmail(email: String!, password: String!): AuthPayload!
  registerUser(email: String!, displayName: String!, password: String!): AuthPayload!

  updatePersonalData(userId: ID!, displayName: String, email: String): SuccessResponse!

  setNewPassword(userId: ID!, oldPassword: String, newPassword: String!): SuccessResponse!

  logout: LogoutResponse

  uploadAvatar(userId: ID!, fileUrl: String!): SuccessResponse!

  deleteAvatar: SuccessResponse!

  addRating(placeId: ID!, rating: Float!): AddRatingResponse!

  addTextReview(placeId: ID!, text: String!): AddTextReviewResponse!

  toggleFavorite(placeId: ID!): Boolean!

  deleteReview(reviewId: ID!, deleteOptions: String!): DeleteReviewResult!

  toggleCharacteristic(placeId: ID!, characteristic: Characteristic!): SuccessResponse!

}

type AddTextReviewResponse {
    reviewId: String!
    text: String!
}

type AddRatingResponse {
    averageRating : Float!
    ratingCount : Int!
    reviewId: String!
    userRating: Int!
}


type DeleteReviewResult {
    reviewId : ID!
    averageRating : Float!
    ratingCount : Int!
}